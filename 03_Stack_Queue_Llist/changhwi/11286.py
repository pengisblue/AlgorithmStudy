import heapq
import sys
heap = []

n = int(input())
for _ in range(n):
    num = int(sys.stdin.readline())
    if num:
        heapq.heappush(heap, (abs(num), num))
    else:
        if heap:
            print(heapq.heappop(heap)[1])
        else:
            print(0)

'''우선순위 큐(Priority Queue)는 큐(Queue)와 비슷한 자료구조로, 
각 요소들이 우선순위를 가지고 있어서 우선순위가 높은 요소가 먼저 처리되는 특징을 갖습니다. 
큐의 일반적인 동작은 FIFO(First-In-First-Out) 방식이지만, 우선순위 큐는 우선순위에 따라 요소들이 처리되는 순서가 달라집니다.

일반적으로 우선순위 큐는 최소 힙(Min Heap) 또는 최대 힙(Max Heap) 자료구조를 사용하여 구현됩니다. 
최소 힙은 가장 작은 값이 루트에 위치하는 이진 트리로 구성되어 있어서 루트의 값이 가장 작고, 자식 노드의 값이 루트의 값보다 크거나 같습니다. 
최대 힙은 최소 힙과 반대로 가장 큰 값이 루트에 위치하는 이진 트리입니다.

우선순위 큐에서 지원하는 기본적인 연산은 다음과 같습니다:

삽입(Insert): 요소를 큐에 추가하고, 우선순위에 따라 올바른 위치에 배치합니다.
삭제(Delete): 가장 우선순위가 높은 요소를 큐에서 제거합니다.
최우선 요소 접근(Peek/Top): 가장 우선순위가 높은 요소를 제거하지 않고 조회합니다.
우선순위 큐는 다양한 상황에서 유용하게 사용될 수 있으며, 힙 자료구조를 활용하여 효율적인 구현이 가능합니다. 
예를 들어, 다익스트라(Dijkstra) 알고리즘에서 최소 비용을 찾거나, 크루스칼(Kruskal) 알고리즘에서 최소 비용 신장 트리를 구성할 때 우선순위 큐를 활용합니다. 
또한, 힙 정렬(Heap Sort) 알고리즘에도 우선순위 큐를 사용할 수 있습니다.'''